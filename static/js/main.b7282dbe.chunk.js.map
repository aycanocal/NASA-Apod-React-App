{"version":3,"sources":["components/DateInput.js","components/Photo.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","changeDate","date","className","selected","onChange","Photo","photo","media_type","title","src","url","alt","width","height","explanation","App","api","today","Date","useState","setDate","setPhoto","useEffect","fetch","then","res","json","getPhoto","getFullYear","getMonth","getDate","formatDate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uNAkBeA,MAdf,YAA0C,IAArBC,EAAoB,EAApBA,WAAYC,EAAQ,EAARA,KAC/B,OACE,yBAAKC,UAAU,QAAf,iBAEE,6BACA,kBAAC,IAAD,CACEC,SAAUF,EACVG,SAAUJ,EACVE,UAAU,iB,iBCaHG,MAtBf,YAA2B,IAAVC,EAAS,EAATA,MACTC,EAAaD,EAAMC,WAEzB,OACE,6BACE,4BAAKD,EAAME,OAEK,UAAfD,EACC,6BACE,yBAAKE,IAAKH,EAAMI,IAAKC,IAAKL,EAAME,MAAON,UAAU,gBAGnD,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAaQ,IAAKJ,EAAMI,IAAKE,MAAM,OAAOC,OAAO,UAIrD,2BAAIP,EAAMQ,eC8BDC,MA9Cf,WACE,IAAMC,EACC,2CADDA,EAEE,sCAGJC,EAAQ,IAAIC,KANH,EAQWC,mBAASF,GARpB,mBAQNhB,EARM,KAQAmB,EARA,OASaD,mBAAS,IATtB,mBASNb,EATM,KASCe,EATD,KAqCb,OA1BAC,qBAAU,WACRC,MAAM,GAAD,OAAIP,EAAJ,qBAAyBA,IAC3BQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASJ,EAASI,QAGzB,IAqBD,yBAAKvB,UAAU,OACb,mEACA,kBAAC,EAAD,CAAWF,WARf,SAAoBC,GAClBmB,EAAQnB,GAdO,SAACA,GAChBsB,MAAM,GAAD,OAAIP,EAAJ,kBAAsBf,EAAtB,oBAAsCe,IACxCQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASJ,EAASI,MAY1BE,CATiB,SAAC1B,GAIlB,OAFEA,EAAK2B,cAAgB,KAAO3B,EAAK4B,WAAa,GAAK,IAAM5B,EAAK6B,UAOvDC,CAAW9B,KAMiBA,KAAMA,IACzC,kBAAC,EAAD,CAAOK,MAAOA,MCjCA0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b7282dbe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction DateInput({ changeDate, date }) {\r\n  return (\r\n    <div className=\"date\">\r\n      Select a Date:\r\n      <br />\r\n      <DatePicker\r\n        selected={date}\r\n        onChange={changeDate}\r\n        className=\"datepicker\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateInput;\r\n","import React from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nfunction Photo({ photo }) {\r\n  const media_type = photo.media_type;\r\n\r\n  return (\r\n    <div>\r\n      <h1>{photo.title}</h1>\r\n\r\n      {media_type === \"image\" ? (\r\n        <div>\r\n          <img src={photo.url} alt={photo.title} className=\"responsive\" />\r\n        </div>\r\n      ) : (\r\n        <div className=\"player-wrapper\">\r\n          <ReactPlayer url={photo.url} width=\"100%\" height=\"100%\" />\r\n        </div>\r\n      )}\r\n\r\n      <p>{photo.explanation}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DateInput from \"./components/DateInput\";\r\nimport Photo from \"./components/Photo\";\r\n\r\nfunction App() {\r\n  const api = {\r\n    key: \"lA3fCfWj2W2sBScUgXdhLPc7kqKTeT4LjElij5UF\",\r\n    base: \"https://api.nasa.gov/planetary/apod\",\r\n  };\r\n\r\n  var today = new Date();\r\n\r\n  const [date, setDate] = useState(today);\r\n  const [photo, setPhoto] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}?&api_key=${api.key}`)\r\n      .then((res) => res.json())\r\n      .then((res) => setPhoto(res));\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getPhoto = (date) => {\r\n    fetch(`${api.base}?&date=${date}&api_key=${api.key}`)\r\n      .then((res) => res.json())\r\n      .then((res) => setPhoto(res));\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    let myDate =\r\n      date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n\r\n    return myDate;\r\n  };\r\n\r\n  function changeDate(date) {\r\n    setDate(date);\r\n    getPhoto(formatDate(date));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>NASA's Astronomy Picture Of The Day</h1>\r\n      <DateInput changeDate={changeDate} date={date} />\r\n      <Photo photo={photo} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}